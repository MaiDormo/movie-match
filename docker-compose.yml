version: "3.8"

# Define reusable config blocks for services
x-common-service: &common-service
  restart: unless-stopped
  env_file:
    - .env

x-adapter-service: &adapter-service
  <<: *common-service
  networks:
    - movie-match-network

x-health-check: &health-check
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:5000/"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 5s

# Services grouped by type
services:
  # External API Adapters
  omdb-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/omdb_adapter
      dockerfile: Dockerfile
    container_name: omdb-adapter
    ports:
      - "5001:5000"
    environment:
      - OMDB_API_KEY=${OMDB_API_KEY}
  
  streaming-availability-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/streaming_availability_adapter
    container_name: streaming-availability-adapter
    ports:
      - "5002:5000"
    environment:
      - STREAMING_AVAILABILITY_API_KEY=${STREAMING_AVAILABILITY_API_KEY}
    volumes:
      - ./adapter_services/streaming_availability_adapter:/streaming_availability_adapter
    
  tmdb-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/tmdb_adapter
    container_name: tmdb-adapter
    ports:
      - "5003:5000"
    environment:
      - TMDB_API_KEY=${TMDB_API_KEY}
    volumes:
      - ./adapter_services/tmdb_adapter:/tmdb_adapter
     
  spotify-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/spotify_adapter
    container_name: spotify-adapter
    ports:
      - "5004:5000"
    environment:
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
    volumes:
      - ./adapter_services/spotify_adapter:/spotify_adapter

  groq-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/groq_adapter
    container_name: groq-adapter
    ports:
      - "5007:5000"
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
    volumes:
      - ./adapter_services/groq_adapter:/groq_adapter

  youtube-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/youtube_adapter
    container_name: youtube-adapter
    ports:
      - "5009:5000"
    environment:
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    volumes:
      - ./adapter_services/youtube_adapter:/youtube_adapter

  # Database Adapters
  user-db-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/user_db_adapter
    container_name: user-db-adapter
    ports:
      - "5010:5000"
    environment:
      - ATLAS_URI=${ATLAS_URI}
      - DB_NAME=${DB_NAME}

  genres-db-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/genres_db_adapter
    container_name: genres-db-adapter
    ports:
      - "5015:5000"
    environment:
      - ATLAS_URI=${ATLAS_URI}
      - DB_NAME=${DB_NAME}

  # Email Services
  email-check-adapter:
    <<: [*adapter-service, *health-check]
    build:
      context: ./adapter_services/email_check_adapter
    container_name: email-check-adapter
    ports:
      - "5011:5000"
    environment:
      - ABSTRACT_API_KEY=${ABSTRACT_API_KEY}

  # Business Logic Services
  valid-email-service:
    <<: [*adapter-service, *health-check]
    build:
      context: ./business_logic_services/valid_email_service
    container_name: valid-email-service
    ports:
      - "5012:5000"
    depends_on:
      email-check-adapter:
        condition: service_healthy

  # Process Centric Services
  user-registration-service:
    <<: [*adapter-service, *health-check]
    build:
      context: ./process_centric_services/user_registration_service
    container_name: user-registration-service
    ports:
      - "5013:5000"
    depends_on:
      valid-email-service:
        condition: service_healthy
      user-db-adapter:
        condition: service_healthy
  
  user-login-service:
    <<: [*adapter-service, *health-check]
    build:
      context: ./process_centric_services/user_login_service
    container_name: user-login-service
    ports:
      - "5014:5000"
    depends_on:
      user-db-adapter:
        condition: service_healthy
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}

  # Frontend Services
  movie-details-interface:
    <<: [*adapter-service, *health-check]
    build:
      context: ./frontend/movie_details
    container_name: movie-details-interface
    ports:
      - "5006:5000"
    volumes:
      - ./frontend/movie_details:/movie_details
    depends_on:
      omdb-adapter:
        condition: service_healthy
      streaming-availability-adapter:
        condition: service_healthy
      spotify-adapter:
        condition: service_healthy
      youtube-adapter:
        condition: service_healthy

# Networks
networks:
  movie-match-network:
    name: movie-match-network
    driver: bridge

# Volumes
volumes:
  movie-match:
    name: movie-match-data